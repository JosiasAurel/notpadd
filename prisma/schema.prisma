datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                          String                        @id @unique @default(uuid())
  username                    String                        @unique
  email                       String
  userId                      String                        @unique
  imageUrl                    String?
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  accounttype                 AccountType                   @default(Free)
  One_time_payment            Boolean                       @default(false)
  spaces                      Space[]
  Feedback                    Feedback[]
  role                        UserRole                      @default(USER)
  AuthorizedAccessCredentials AuthorizedAccessCredentials[]
}

model Team {
  id          String   @id @unique @default(uuid())
  name        String
  profileUrl  String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  spaces      Space[]
  Member      Member[]
}

model Member {
  id        String   @id @unique @default(uuid())
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Space {
  id                          String                        @id @unique @default(uuid())
  articles                    Article[]
  title                       String
  key                         String                        @unique
  description                 String?
  User                        User?                         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                      String
  AuthorizedAccessCredentials AuthorizedAccessCredentials[]
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  Team                        Team?                         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId                      String?

  @@index([userId])
}

model UserSpaceList {
  id       String @id @unique @default(uuid())
  spaceKey String @unique
  userId   String
  count    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserArticleList {
  id       String @id @unique @default(uuid())
  spaceKey String @unique
  userId   String
  count    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feedback {
  id      String @id @unique @default(uuid())
  userId  String
  message String
  User    User?  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Article {
  id           String      @id @unique @default(uuid())
  isPublic     Boolean     @default(false)
  content      String?
  akey         String      @unique
  title        String
  userId       String
  type         ArticleType @default(Blog)
  displayImage String?     @default("https://utfs.io/f/259bad6f-e4f4-4afa-a334-d3cfd942d90e-9w6i5v.svg")
  key          String?
  slug         String
  description  String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  Space        Space?      @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  spaceId      String

  @@unique([title, spaceId, slug])
  @@index([userId])
}

model AuthorizedAccessCredentials {
  id                   String   @id @unique @default(uuid())
  userId               String
  User                 User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  spaceId              String
  Space                Space?   @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  next_notpadd_userId  String
  next_notpadd_spaceId String   @unique @default(uuid())
  secretkey            String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

enum AccountType {
  Free
  Basic
  Premium
  Enterprise
}

enum ArticleType {
  Blog
  Article
  SimpleNotes
  Other
}

enum Role {
  ADMIN
  MODERATOR
  GUEST
}

enum UserRole {
  ADMIN
  USER
}
