datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

enum ProjectStatus {
  Draft
  Published
  Archived
}

enum MemberRole {
  Owner
  Member
  Moderator
  Editor
}

enum UserRole {
  Admin
  User
}

enum AccountType {
  Free
  Basic
  Premium
  Enterprise
}

model User {
  id                          String                        @id
  createdAt                   DateTime                      @default(now())
  email                       String                        @unique
  name                        String?
  member                      Member[]
  spaces                      Space[]
  imageUrl                    String?
  accounttype                 AccountType                   @default(Free)
  role                        UserRole                      @default(User)
  AuthorizedAccessCredentials AuthorizedAccessCredentials[]
  craetedAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
}

model Team {
  id        String   @id @default(cuid())
  name      String
  creatorId String
  members   Member[]

  craetedAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  membersLifeTimeCount Int      @default(0)

  Space Space[]
}

model Member {
  id        String     @id @default(cuid())
  teamId    String
  role      MemberRole @default(Member)
  user      User       @relation(fields: [userId], references: [id])
  team      Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userId    String
  craetedAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Space {
  id                          String                        @id
  name                        String
  teamId                      String
  team                        Team                          @relation(fields: [teamId], references: [id])
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  key                         String                        @unique
  AuthorizedAccessCredentials AuthorizedAccessCredentials[]
  User                        User?                         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                      String
  articles                    Article[]
  articlecount                Int                           @default(0)
}

model Article {
  id          String        @id
  slug        String        @unique
  title       String
  description String?
  status      ProjectStatus @default(Draft)
  content     Json?
  spaceId     String
  space       Space         @relation(fields: [spaceId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@unique([slug, spaceId])
  @@index([spaceId])
}

model AuthorizedAccessCredentials {
  id                   String   @id @unique @default(uuid())
  userId               String
  User                 User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  spaceId              String
  Space                Space?   @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  next_notpadd_userId  String
  next_notpadd_spaceId String   @unique @default(uuid())
  secretkey            String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model Subscription {
  id        String   @id @default(cuid())
  plan      String
  price     Float
  currency  String
  interval  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
